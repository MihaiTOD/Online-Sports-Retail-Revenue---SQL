1. Data Completeness Check:
   
     SELECT
       COUNT(*) AS total_rows,
       COUNT(i.description) AS count_description,
       COUNT(f.listing_price) AS count_listing_price,
       COUNT(t.last_visited) AS count_last_visited
     FROM info AS i  
       INNER JOIN finance AS f ON i.product_id = f.product_id
       INNER JOIN traffic AS t ON f.product_id = t.product_id;
    
    Result:
     - 3,179 total products.
     - "last_visited" column has more than 5% missing values.


2. Price Distribution by Brand:
   
     SELECT
       b.brand,
       CAST(f.listing_price AS INTEGER) AS listing_price,
       COUNT(f.product_id)
     FROM brands AS b
       INNER JOIN finance AS f ON b.product_id = f.product_id
     WHERE f.listing_price > 0
     GROUP BY brand, listing_price 
     ORDER BY listing_price DESC;
    
   Result:
     Nike and Adidas products compared in price distribution.


3. Brand-wise Discount Analysis:
   
     SELECT
       b.brand,
       AVG(f.discount) * 100 AS average_discount
     FROM brands AS b
       INNER JOIN finance AS f ON b.product_id = f.product_id
     GROUP BY brand
     ORDER BY average_discount;

     Result:
     - No discount on Nike products.
     - Adidas products, with significant revenue, have substantial discounts.


4. Correlation: Revenue and Reviews:
   
     SELECT CORR(reviews, revenue) AS review_revenue_corr
     FROM reviews AS r 
       JOIN finance AS f ON r.product_id = f.product_id;
     
   Result:
     - Strong positive correlation between revenue and reviews.


5. Product Description Length vs. Rating:
   
     SELECT 
       TRUNC(LENGTH(i.description), -2) AS description_length,
       ROUND(AVG(r.rating::numeric), 2) AS average_rating
     FROM info AS i
       JOIN reviews AS r ON i.product_id = r.product_id
     WHERE i.description IS NOT NULL 
     GROUP BY description_length
     ORDER BY description_length;
    
   Result:
     - No clear pattern between description length and rating.


6. Monthly Review Trends:
  
     SELECT
       b.brand, 
       DATE_PART('month', t.last_visited) AS month, 
       COUNT(r.*) AS num_reviews
     FROM brands AS b
       INNER JOIN traffic AS t ON b.product_id = t.product_id
       INNER JOIN reviews AS r ON t.product_id = r.product_id
     GROUP BY b.brand, month
     HAVING b.brand IS NOT NULL
       AND DATE_PART('month', t.last_visited) IS NOT NULL
     ORDER BY b.brand, month;
     
   Result:
     - Identifies trends and gaps in monthly review volumes.


7. Footwear vs. Non-Footwear Analysis:
   
     WITH footwear AS 
     (
         SELECT 
             i.description,
             f.revenue
         FROM info AS i
         JOIN finance AS f ON i.product_id = f.product_id
         WHERE (description ILIKE '%shoe%'
                OR description ILIKE '%trainer%'
                OR description ILIKE '%foot%')
           AND description IS NOT NULL
     )
     SELECT
         COUNT(*) AS num_footwear_products,
         PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY revenue) AS median_footwear_revenue
     FROM footwear;
     
   Result:
     - 85% of stock comprises 2,700 footwear products with a median revenue exceeding $3000.


8. Clothing Products Analysis:
   
     WITH footwear AS
     (
         SELECT i.description, f.revenue
         FROM info AS i
         INNER JOIN finance AS f 
             ON i.product_id = f.product_id
         WHERE i.description ILIKE '%shoe%'
             OR i.description ILIKE '%trainer%'
             OR i.description ILIKE '%foot%'
             AND i.description IS NOT NULL
     )
     SELECT COUNT(i.*) AS num_clothing_products, 
         PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY f.revenue) AS median_clothing_revenue
     FROM info AS i
     INNER JOIN finance AS f ON i.product_id = f.product_id
     WHERE i.description NOT IN (SELECT description FROM footwear);
     
   Result:
     - Insights into the number and median revenue of non-footwear products, providing a comprehensive view of product offerings.
